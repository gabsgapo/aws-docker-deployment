name: Deploy to Amazon ECS

on:
  push:
    branches:
      - Production
  pull_request_review:
    types:
      - submitted

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: nginx-image
  ECS_SERVICE: ecs-service
  ECS_CLUSTER: cluster
  ECS_TASK_DEFINITION: task_definition.yml         # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: nginx-container

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_NAME: my-app
        TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY/$IMAGE_NAME:$TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY/$IMAGE_NAME:$TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY/$IMAGE_NAME:$TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: nginx-container
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
